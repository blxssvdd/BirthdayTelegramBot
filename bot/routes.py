from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from .states import RegisterState, SettingsState
from .keyboards import get_confirm_birthday_kb, get_timezone_share_kb, get_main_menu_kb
import re
from datetime import datetime, date
import requests
from timezonefinder import TimezoneFinder
import pytz
import logging
from aiogram import F
from bot.calendar import get_years_kb, get_months_kb, get_days_kb, get_confirm_kb

from sqlalchemy import select, update
from bot.db.database import get_db
from bot.db.users.models import User

router = Router()
logger = logging.getLogger(__name__)

def get_confirm_timezone_kb(tz, city=None):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm_timezone:{tz}'),
             InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change_timezone')]
        ]
    )

def get_disable_notifications_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å', callback_data='confirm_disable_notifications')],
            [InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_disable_notifications')]
        ]
    )

def get_timezone_message(city, timezone):
    try:
        tz = pytz.timezone(timezone)
        current_time = datetime.now(tz).strftime('%H:%M')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã {timezone}: {e}")
        current_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    message = ""
    if city:
        message += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
    message += f"üåç –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
    message += f"üïê –í–∞—à–µ –≤—Ä–µ–º—è: {current_time}"
    
    return message

@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        'üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:',
        reply_markup=get_years_kb(2000)
    )
    await state.set_state(RegisterState.waiting_for_birthday)

@router.message(RegisterState.waiting_for_birthday)
async def process_birthday(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text):
        await message.answer('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11.11.2000)')
        return
    try:
        birthday = datetime.strptime(date_text, '%d.%m.%Y').date()
    except ValueError:
        await message.answer('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return
    await state.update_data(birthday=birthday.isoformat())
    await message.answer(
        f'üìÖ –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{birthday.strftime("%d.%m.%Y")}</b>\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
        reply_markup=get_confirm_birthday_kb(),
        parse_mode='HTML'
    )
    await state.set_state(RegisterState.confirm_birthday)

@router.callback_query(lambda c: c.data == 'change_birthday', RegisterState.confirm_birthday)
async def change_birthday(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.')
    await state.set_state(RegisterState.waiting_for_birthday)

@router.callback_query(lambda c: c.data == 'confirm_birthday', RegisterState.confirm_birthday)
async def confirm_birthday(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    birthday_iso = user_data.get('birthday')
    try:
        if birthday_iso:
            birth_date = datetime.fromisoformat(birthday_iso).date()
        else:
            birth_date = None
    except Exception:
        birth_date = None

    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == callback_query.from_user.id))
        user = result.scalar_one_or_none()
        if user:
            user.birthday = birth_date
            user.notifications_enabled = True  # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        else:
            user = User(user_id=callback_query.from_user.id, birthday=birth_date, notifications_enabled=True)
            session.add(user)
        await session.commit()

    await callback_query.message.answer(
        '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.',
        reply_markup=get_timezone_share_kb()
    )
    await state.set_state(RegisterState.waiting_for_timezone)
    logger.info(f'FSM: –æ–∂–∏–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, user_id={callback_query.from_user.id}')
    await callback_query.answer()

@router.message(RegisterState.waiting_for_timezone)
async def process_timezone(message: Message, state: FSMContext):
    try:
        logger.info(f'FSM: –æ–∂–∏–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, user_id={message.from_user.id}')
        logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: text={message.text}, location={message.location}')
        tz = None
        city = message.text.strip() if message.text else None
        location = message.location
        tf = TimezoneFinder()
        logger.info(f'city={city}, location={location}')
        
        if location:
            tz = tf.timezone_at(lng=location.longitude, lat=location.latitude)
            logger.info(f'timezonefinder –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {tz}')
            # –î–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            if not city:
                url = f'https://nominatim.openstreetmap.org/reverse?lat={location.latitude}&lon={location.longitude}&format=json'
                resp = requests.get(url, headers={'User-Agent': 'BirthdayBot'})
                data = resp.json()
                if data and 'address' in data:
                    city = data['address'].get('city') or data['address'].get('town') or data['address'].get('village') or data['address'].get('municipality')
        elif city:
            url = f'https://nominatim.openstreetmap.org/search?city={city}&format=json&limit=1'
            resp = requests.get(url, headers={'User-Agent': 'BirthdayBot'})
            data = resp.json()
            logger.info(f'Nominatim response: {data}')
            if data:
                lat = float(data[0]['lat'])
                lon = float(data[0]['lon'])
                logger.info(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞: lat={lat}, lon={lon}')
                tz = tf.timezone_at(lng=lon, lat=lat)
                logger.info(f'timezonefinder –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {tz}')
        
        logger.info(f'city={city}, location={location}, tz={tz}')
        if not tz:
            logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}, location: {location}')
            await message.answer('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(timezone=tz, city=city)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        timezone_message = get_timezone_message(city, tz)
        await message.answer(
            timezone_message,
            reply_markup=get_confirm_timezone_kb(tz, city)
        )
        await state.set_state(RegisterState.confirm_timezone)
        logger.info(f'FSM: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, user_id={message.from_user.id}')
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}', exc_info=True)
        await message.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.')

@router.callback_query(lambda c: c.data.startswith('confirm_timezone:'), RegisterState.confirm_timezone)
async def confirm_timezone_handler(callback: CallbackQuery, state: FSMContext):
    tz = callback.data.split(':', 1)[1]
    user_data = await state.get_data()
    city = user_data.get('city')
    
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        if user:
            user.timezone = tz
            user.city = city
        else:
            user = User(user_id=callback.from_user.id, timezone=tz, city=city, notifications_enabled=True)
            session.add(user)
        await session.commit()

    timezone_message = get_timezone_message(city, tz)
    await callback.message.edit_text(f'{timezone_message}\n\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ')
    await callback.message.answer('–ú–µ–Ω—é', reply_markup=get_main_menu_kb())
    await state.clear()
    logger.info(f'FSM: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, user_id={callback.from_user.id}')
    await callback.answer()

@router.callback_query(lambda c: c.data == 'change_timezone', RegisterState.confirm_timezone)
async def change_timezone_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:', reply_markup=get_timezone_share_kb())
    await state.set_state(RegisterState.waiting_for_timezone)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
@router.message(SettingsState.waiting_for_new_timezone)
async def set_new_timezone(message: Message, state: FSMContext):
    try:
        tz = None
        city = message.text.strip() if message.text else None
        location = message.location
        tf = TimezoneFinder()
        
        if location:
            tz = tf.timezone_at(lng=location.longitude, lat=location.latitude)
            # –î–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            if not city:
                url = f'https://nominatim.openstreetmap.org/reverse?lat={location.latitude}&lon={location.longitude}&format=json'
                resp = requests.get(url, headers={'User-Agent': 'BirthdayBot'})
                data = resp.json()
                if data and 'address' in data:
                    city = data['address'].get('city') or data['address'].get('town') or data['address'].get('village') or data['address'].get('municipality')
        elif city:
            url = f'https://nominatim.openstreetmap.org/search?city={city}&format=json&limit=1'
            resp = requests.get(url, headers={'User-Agent': 'BirthdayBot'})
            data = resp.json()
            if data:
                lat = float(data[0]['lat'])
                lon = float(data[0]['lon'])
                tz = tf.timezone_at(lng=lon, lat=lat)
        
        if not tz:
            await message.answer('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(timezone=tz, city=city)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        timezone_message = get_timezone_message(city, tz)
        await message.answer(
            timezone_message,
            reply_markup=get_confirm_timezone_kb(tz, city)
        )
        await state.set_state(SettingsState.confirm_new_timezone)
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}', exc_info=True)
        await message.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.')

@router.callback_query(lambda c: c.data.startswith('confirm_timezone:'), SettingsState.confirm_new_timezone)
async def confirm_timezone_change_handler(callback: CallbackQuery, state: FSMContext):
    tz = callback.data.split(':', 1)[1]
    user_data = await state.get_data()
    city = user_data.get('city')
    
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        if user:
            user.timezone = tz
            user.city = city
        else:
            user = User(user_id=callback.from_user.id, timezone=tz, city=city, notifications_enabled=True)
            session.add(user)
        await session.commit()

    timezone_message = get_timezone_message(city, tz)
    await callback.message.edit_text(f'{timezone_message}\n\n‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω!')
    await callback.message.answer('–ú–µ–Ω—é', reply_markup=get_main_menu_kb())
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == 'change_timezone', SettingsState.confirm_new_timezone)
async def change_timezone_change_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:', reply_markup=get_timezone_share_kb())
    await state.set_state(SettingsState.waiting_for_new_timezone)
    await callback.answer()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
@router.message(lambda m: m.text and m.text.strip().lower() == '—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è?')
async def days_until_birthday(message: Message):
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user or not user.birthday or not user.timezone:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
            return

        birthday = user.birthday
        tz = pytz.timezone(user.timezone)
        now = datetime.now(tz).date()
        next_birthday = birthday.replace(year=now.year)
        if next_birthday < now:
            next_birthday = next_birthday.replace(year=now.year + 1)
        days = (next_birthday - now).days
        await message.answer(f'üéÇ –î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å <b>{days}</b> –¥–Ω–µ–π!', parse_mode='HTML')

@router.message(lambda m: m.text and m.text.strip().lower() == '—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è?')
async def days_since_birthday(message: Message):
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user or not user.birthday or not user.timezone:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
            return

        birthday = user.birthday
        tz = pytz.timezone(user.timezone)
        now = datetime.now(tz).date()
        last_birthday = birthday.replace(year=now.year)
        if last_birthday > now:
            last_birthday = last_birthday.replace(year=now.year - 1)
        days = (now - last_birthday).days
        await message.answer(f'üìÖ –° –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ <b>{days}</b> –¥–Ω–µ–π!', parse_mode='HTML')

@router.message(lambda m: m.text and m.text.strip().lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É')
async def change_birthday_menu(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=get_years_kb(2000))
    await state.set_state(SettingsState.waiting_for_new_birthday)

@router.message(SettingsState.waiting_for_new_birthday)
async def set_new_birthday(message: Message, state: FSMContext):
    date_text = message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text):
        await message.answer('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11.11.2000)')
        return
    try:
        birthday = datetime.strptime(date_text, '%d.%m.%Y').date()
    except ValueError:
        await message.answer('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()
        if user:
            user.birthday = birthday
            user.notifications_enabled = True
        else:
            user = User(user_id=message.from_user.id, birthday=birthday, notifications_enabled=True)
            session.add(user)
        await session.commit()

    await message.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    await state.clear()

@router.message(lambda m: m.text and m.text.strip().lower() == '–∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å')
async def change_timezone_menu(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:', reply_markup=get_timezone_share_kb())
    await state.set_state(SettingsState.waiting_for_new_timezone)

@router.message(lambda m: m.text and m.text.strip().lower() == '–º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
async def show_settings(message: Message):
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
            return

        settings_text = "üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        
        if user.birthday:
            settings_text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthday.strftime('%d.%m.%Y')}\n"
        else:
            settings_text += "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
            
        if user.timezone and user.city:
            timezone_message = get_timezone_message(user.city, user.timezone)
            settings_text += f"{timezone_message}\n"
        else:
            settings_text += "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            
        if user.notifications_enabled:
            settings_text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã"
        else:
            settings_text += "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã"

        await message.answer(settings_text)

@router.message(lambda m: m.text and m.text.strip().lower() == '–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def disable_notifications_menu(message: Message):
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer('‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.')
            return

    await message.answer(
        '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n\n'
        '–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:\n'
        '‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
        '‚Ä¢ –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n'
        '‚Ä¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
        reply_markup=get_disable_notifications_kb()
    )

@router.callback_query(lambda c: c.data == 'confirm_disable_notifications')
async def confirm_disable_notifications(callback: CallbackQuery):
    async for session in get_db():
        result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
        user = result.scalar_one_or_none()

        if user:
            await session.delete(user)
            await session.commit()
            
            await callback.message.edit_text(
                '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!\n\n'
                '‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
                '‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n'
                '‚Ä¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start'
            )
        else:
            await callback.message.edit_text('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
    
    await callback.answer()

@router.callback_query(lambda c: c.data == 'cancel_disable_notifications')
async def cancel_disable_notifications(callback: CallbackQuery):
    await callback.message.edit_text('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    await callback.answer()

@router.message(Command('state'))
async def show_state(message: Message, state: FSMContext):
    s = await state.get_state()
    await message.answer(f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {s}')

@router.message(Command('menu'))
async def show_main_menu(message: Message, state: FSMContext):
    await message.answer('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/timezone ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

@router.message(Command('timezone'))
async def change_timezone_command(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:', reply_markup=get_timezone_share_kb())
    await state.set_state(SettingsState.waiting_for_new_timezone)

@router.message()
async def fallback_handler(message: types.Message, state: FSMContext):
    s = await state.get_state()
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n"
        "–ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start."
        f"\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {s}"
    )

# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ---

@router.callback_query(lambda c: c.data.startswith('cal:year:'), RegisterState.waiting_for_birthday)
@router.callback_query(lambda c: c.data.startswith('cal:year:'), SettingsState.waiting_for_new_birthday)
async def calendar_year_handler(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split(':')[2])
    await state.update_data(year=year)
    await callback.message.edit_text(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü',
        reply_markup=get_months_kb(year)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:month:'), RegisterState.waiting_for_birthday)
@router.callback_query(lambda c: c.data.startswith('cal:month:'), SettingsState.waiting_for_new_birthday)
async def calendar_month_handler(callback: CallbackQuery, state: FSMContext):
    _, _, year, month = callback.data.split(':')
    year = int(year)
    month = int(month)
    await state.update_data(month=month)
    await callback.message.edit_text(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å',
        reply_markup=get_days_kb(year, month)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:day:'), RegisterState.waiting_for_birthday)
@router.callback_query(lambda c: c.data.startswith('cal:day:'), SettingsState.waiting_for_new_birthday)
async def calendar_day_handler(callback: CallbackQuery, state: FSMContext):
    _, _, year, month, day = callback.data.split(':')
    year = int(year)
    month = int(month)
    day = int(day)
    date_str = f'{day:02d}.{month:02d}.{year}'
    await state.update_data(day=day, birthday=date_str)
    await callback.message.edit_text(
        f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ {date_str}',
        reply_markup=get_confirm_kb(date_str)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:confirm:'), RegisterState.waiting_for_birthday)
@router.callback_query(lambda c: c.data.startswith('cal:confirm:'), RegisterState.confirm_birthday)
@router.callback_query(lambda c: c.data.startswith('cal:confirm:'), SettingsState.waiting_for_new_birthday)
async def calendar_confirm_handler(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split(':')[2]
    iso_date = datetime.strptime(date_str, '%d.%m.%Y').date()
    current_state = await state.get_state()
    if current_state == SettingsState.waiting_for_new_birthday.state:
        async for session in get_db():
            result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                user.birthday = iso_date
                user.notifications_enabled = True  # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
            else:
                user = User(user_id=callback.from_user.id, birthday=iso_date, notifications_enabled=True)
                session.add(user)
            await session.commit()
        await callback.message.edit_text('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        await state.clear()
    else:
        await state.update_data(birthday=iso_date.isoformat())
        async for session in get_db():
            result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                user.birthday = iso_date
                user.notifications_enabled = True  # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            else:
                user = User(user_id=callback.from_user.id, birthday=iso_date, notifications_enabled=True)
                session.add(user)
            await session.commit()
        await callback.message.edit_text(
            '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.'
        )
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:', reply_markup=get_timezone_share_kb())
        await state.set_state(RegisterState.waiting_for_timezone)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'cal:change', RegisterState.confirm_birthday)
@router.callback_query(lambda c: c.data == 'cal:change', SettingsState.waiting_for_new_birthday)
async def calendar_change_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=get_years_kb(2000))
    if await state.get_state() == RegisterState.confirm_birthday.state:
        await state.set_state(RegisterState.waiting_for_birthday)
    else:
        await state.set_state(SettingsState.waiting_for_new_birthday)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:year_prev:'))
async def calendar_year_prev(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(':')[2])
    new_page = max(0, page - 1)
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=get_years_kb(new_page))
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:year_next:'))
async def calendar_year_next(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(':')[2])
    new_page = page + 1
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=get_years_kb(new_page))
    await callback.answer()

@router.callback_query(lambda c: c.data == 'cal:back_to_years')
async def calendar_back_to_years(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    year = data.get('year')
    from bot.calendar import START_YEAR, YEARS_PER_PAGE
    if year:
        page = (int(year) - START_YEAR) // YEARS_PER_PAGE
    else:
        page = 0
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=get_years_kb(page))
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cal:back_to_months:'))
async def calendar_back_to_months(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split(':')[2])
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü', reply_markup=get_months_kb(year))
    await callback.answer()