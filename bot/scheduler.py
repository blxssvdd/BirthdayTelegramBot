import logging
from datetime import datetime, time
import pytz
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from bot.db.database import Session
from bot.db.users.models import User
from sqlalchemy import select

logger = logging.getLogger(__name__)

async def send_birthday_countdown(bot: Bot):
    async with Session() as session:
        try:
            result = await session.execute(
                select(User).where(User.birthday != None, User.timezone != None)
            )
            users = result.scalars().all()
            
            for user in users:
                try:
                    tz = pytz.timezone(user.timezone)
                    now = datetime.now(tz)
                    birthday = user.birthday
                    next_birthday = birthday.replace(year=now.year)
                    if next_birthday < now.date():
                        next_birthday = next_birthday.replace(year=now.year + 1)
                    days_left = (next_birthday - now.date()).days

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–æ–≤–Ω–æ –≤ 00:00 –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if now.hour == 0 and now.minute < 5:
                        await bot.send_message(
                            user.user_id,
                            f'üéâ –î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å <b>{days_left}</b> –¥–Ω–µ–π!',
                            parse_mode='HTML'
                        )
                        logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user.user_id}, days_left={days_left}')
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id={user.user_id}: {e}', exc_info=True)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}', exc_info=True)

def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler()
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 00:00 –≤ –ª—é–±–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    scheduler.add_job(send_birthday_countdown, CronTrigger(minute='*/5', hour='*'), args=[bot])
    scheduler.start()
    logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.')
